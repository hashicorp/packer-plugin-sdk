// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package happycloud

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	AccountFile                  *string `mapstructure:"account_file" required:"false" cty:"account_file" hcl:"account_file"`
	ProjectId                    *string `mapstructure:"project_id" required:"true" cty:"project_id" hcl:"project_id"`
	AcceleratorCount             *int64  `mapstructure:"accelerator_count" required:"false" cty:"accelerator_count" hcl:"accelerator_count"`
	Address                      *string `mapstructure:"address" required:"false" cty:"address" hcl:"address"`
	DisableDefaultServiceAccount *bool   `mapstructure:"disable_default_service_account" required:"false" cty:"disable_default_service_account" hcl:"disable_default_service_account"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"account_file":                    &hcldec.AttrSpec{Name: "account_file", Type: cty.String, Required: false},
		"project_id":                      &hcldec.AttrSpec{Name: "project_id", Type: cty.String, Required: false},
		"accelerator_count":               &hcldec.AttrSpec{Name: "accelerator_count", Type: cty.Number, Required: false},
		"address":                         &hcldec.AttrSpec{Name: "address", Type: cty.String, Required: false},
		"disable_default_service_account": &hcldec.AttrSpec{Name: "disable_default_service_account", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatCustomerEncryptionKey is an auto-generated flat version of CustomerEncryptionKey.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatCustomerEncryptionKey struct {
	KeyName *string `mapstructure:"key_name" json:"key_name,omitempty" cty:"key_name" hcl:"key_name"`
	RawKey  *string `mapstructure:"raw_key" json:"raw_key,omitempty" cty:"raw_key" hcl:"raw_key"`
}

// FlatMapstructure returns a new FlatCustomerEncryptionKey.
// FlatCustomerEncryptionKey is an auto-generated flat version of CustomerEncryptionKey.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*CustomerEncryptionKey) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatCustomerEncryptionKey)
}

// HCL2Spec returns the hcl spec of a CustomerEncryptionKey.
// This spec is used by HCL to read the fields of CustomerEncryptionKey.
// The decoded values from this spec will then be applied to a FlatCustomerEncryptionKey.
func (*FlatCustomerEncryptionKey) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"key_name": &hcldec.AttrSpec{Name: "key_name", Type: cty.String, Required: false},
		"raw_key":  &hcldec.AttrSpec{Name: "raw_key", Type: cty.String, Required: false},
	}
	return s
}
